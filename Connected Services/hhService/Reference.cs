//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ToolSL.hhService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Folder", Namespace="http://schemas.datacontract.org/2004/07/ImportService")]
    [System.SerializableAttribute()]
    public partial class Folder : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderName {
            get {
                return this.FolderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderNameField, value) != true)) {
                    this.FolderNameField = value;
                    this.RaisePropertyChanged("FolderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/ImportService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CommunityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailStateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FolderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FullNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long ProcessedFilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RoleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long TotalFilesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Comments {
            get {
                return this.CommentsField;
            }
            set {
                if ((object.ReferenceEquals(this.CommentsField, value) != true)) {
                    this.CommentsField = value;
                    this.RaisePropertyChanged("Comments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Community {
            get {
                return this.CommunityField;
            }
            set {
                if ((object.ReferenceEquals(this.CommunityField, value) != true)) {
                    this.CommunityField = value;
                    this.RaisePropertyChanged("Community");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailState {
            get {
                return this.EmailStateField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailStateField, value) != true)) {
                    this.EmailStateField = value;
                    this.RaisePropertyChanged("EmailState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FolderName {
            get {
                return this.FolderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FolderNameField, value) != true)) {
                    this.FolderNameField = value;
                    this.RaisePropertyChanged("FolderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FullName {
            get {
                return this.FullNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FullNameField, value) != true)) {
                    this.FullNameField = value;
                    this.RaisePropertyChanged("FullName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdPlayer {
            get {
                return this.IdPlayerField;
            }
            set {
                if ((this.IdPlayerField.Equals(value) != true)) {
                    this.IdPlayerField = value;
                    this.RaisePropertyChanged("IdPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastDate {
            get {
                return this.LastDateField;
            }
            set {
                if ((this.LastDateField.Equals(value) != true)) {
                    this.LastDateField = value;
                    this.RaisePropertyChanged("LastDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long ProcessedFiles {
            get {
                return this.ProcessedFilesField;
            }
            set {
                if ((this.ProcessedFilesField.Equals(value) != true)) {
                    this.ProcessedFilesField = value;
                    this.RaisePropertyChanged("ProcessedFiles");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Role {
            get {
                return this.RoleField;
            }
            set {
                if ((object.ReferenceEquals(this.RoleField, value) != true)) {
                    this.RoleField = value;
                    this.RaisePropertyChanged("Role");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string State {
            get {
                return this.StateField;
            }
            set {
                if ((object.ReferenceEquals(this.StateField, value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long TotalFiles {
            get {
                return this.TotalFilesField;
            }
            set {
                if ((this.TotalFilesField.Equals(value) != true)) {
                    this.TotalFilesField = value;
                    this.RaisePropertyChanged("TotalFiles");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientVersion", Namespace="http://schemas.datacontract.org/2004/07/ImportService")]
    [System.SerializableAttribute()]
    public partial class ClientVersion : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MaxVersionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MinVersionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MaxVersion {
            get {
                return this.MaxVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.MaxVersionField, value) != true)) {
                    this.MaxVersionField = value;
                    this.RaisePropertyChanged("MaxVersion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MinVersion {
            get {
                return this.MinVersionField;
            }
            set {
                if ((object.ReferenceEquals(this.MinVersionField, value) != true)) {
                    this.MinVersionField = value;
                    this.RaisePropertyChanged("MinVersion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpdateData", Namespace="http://schemas.datacontract.org/2004/07/ImportService")]
    [System.SerializableAttribute()]
    public partial class UpdateData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] DataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Data {
            get {
                return this.DataField;
            }
            set {
                if ((object.ReferenceEquals(this.DataField, value) != true)) {
                    this.DataField = value;
                    this.RaisePropertyChanged("Data");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="hhService.IServiceImport")]
    public interface IServiceImport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/CheckConnection", ReplyAction="http://tempuri.org/IServiceImport/CheckConnectionResponse")]
        bool CheckConnection(string userHash, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/CheckConnection", ReplyAction="http://tempuri.org/IServiceImport/CheckConnectionResponse")]
        System.Threading.Tasks.Task<bool> CheckConnectionAsync(string userHash, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/RegisterToken", ReplyAction="http://tempuri.org/IServiceImport/RegisterTokenResponse")]
        string RegisterToken(string username, string password, string hash, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/RegisterToken", ReplyAction="http://tempuri.org/IServiceImport/RegisterTokenResponse")]
        System.Threading.Tasks.Task<string> RegisterTokenAsync(string username, string password, string hash, string role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/CheckFileHash", ReplyAction="http://tempuri.org/IServiceImport/CheckFileHashResponse")]
        string CheckFileHash(string userHash, string fileHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/CheckFileHash", ReplyAction="http://tempuri.org/IServiceImport/CheckFileHashResponse")]
        System.Threading.Tasks.Task<string> CheckFileHashAsync(string userHash, string fileHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/SendFile", ReplyAction="http://tempuri.org/IServiceImport/SendFileResponse")]
        string SendFile(string userHash, string fileHash, string fileName, byte[] Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/SendFile", ReplyAction="http://tempuri.org/IServiceImport/SendFileResponse")]
        System.Threading.Tasks.Task<string> SendFileAsync(string userHash, string fileHash, string fileName, byte[] Content);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/RegisterFile", ReplyAction="http://tempuri.org/IServiceImport/RegisterFileResponse")]
        bool RegisterFile(string userHash, int id_player, string fileHash, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/RegisterFile", ReplyAction="http://tempuri.org/IServiceImport/RegisterFileResponse")]
        System.Threading.Tasks.Task<bool> RegisterFileAsync(string userHash, int id_player, string fileHash, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetFolders", ReplyAction="http://tempuri.org/IServiceImport/GetFoldersResponse")]
        ToolSL.hhService.Folder[] GetFolders(string userHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetFolders", ReplyAction="http://tempuri.org/IServiceImport/GetFoldersResponse")]
        System.Threading.Tasks.Task<ToolSL.hhService.Folder[]> GetFoldersAsync(string userHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/CreateFolder", ReplyAction="http://tempuri.org/IServiceImport/CreateFolderResponse")]
        bool CreateFolder(string userHash, string folderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/CreateFolder", ReplyAction="http://tempuri.org/IServiceImport/CreateFolderResponse")]
        System.Threading.Tasks.Task<bool> CreateFolderAsync(string userHash, string folderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetPlayers", ReplyAction="http://tempuri.org/IServiceImport/GetPlayersResponse")]
        ToolSL.hhService.Player[] GetPlayers(string userHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetPlayers", ReplyAction="http://tempuri.org/IServiceImport/GetPlayersResponse")]
        System.Threading.Tasks.Task<ToolSL.hhService.Player[]> GetPlayersAsync(string userHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/SavePlayer", ReplyAction="http://tempuri.org/IServiceImport/SavePlayerResponse")]
        int SavePlayer(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/SavePlayer", ReplyAction="http://tempuri.org/IServiceImport/SavePlayerResponse")]
        System.Threading.Tasks.Task<int> SavePlayerAsync(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/RemovePlayer", ReplyAction="http://tempuri.org/IServiceImport/RemovePlayerResponse")]
        bool RemovePlayer(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/RemovePlayer", ReplyAction="http://tempuri.org/IServiceImport/RemovePlayerResponse")]
        System.Threading.Tasks.Task<bool> RemovePlayerAsync(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/ApprovePlayer", ReplyAction="http://tempuri.org/IServiceImport/ApprovePlayerResponse")]
        bool ApprovePlayer(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/ApprovePlayer", ReplyAction="http://tempuri.org/IServiceImport/ApprovePlayerResponse")]
        System.Threading.Tasks.Task<bool> ApprovePlayerAsync(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/DisablePlayer", ReplyAction="http://tempuri.org/IServiceImport/DisablePlayerResponse")]
        bool DisablePlayer(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/DisablePlayer", ReplyAction="http://tempuri.org/IServiceImport/DisablePlayerResponse")]
        System.Threading.Tasks.Task<bool> DisablePlayerAsync(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/EnablePlayer", ReplyAction="http://tempuri.org/IServiceImport/EnablePlayerResponse")]
        bool EnablePlayer(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/EnablePlayer", ReplyAction="http://tempuri.org/IServiceImport/EnablePlayerResponse")]
        System.Threading.Tasks.Task<bool> EnablePlayerAsync(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetVersion", ReplyAction="http://tempuri.org/IServiceImport/GetVersionResponse")]
        ToolSL.hhService.ClientVersion GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetVersion", ReplyAction="http://tempuri.org/IServiceImport/GetVersionResponse")]
        System.Threading.Tasks.Task<ToolSL.hhService.ClientVersion> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetAllFileHashes", ReplyAction="http://tempuri.org/IServiceImport/GetAllFileHashesResponse")]
        string[] GetAllFileHashes(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetAllFileHashes", ReplyAction="http://tempuri.org/IServiceImport/GetAllFileHashesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllFileHashesAsync(string userHash, ToolSL.hhService.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetUpdate", ReplyAction="http://tempuri.org/IServiceImport/GetUpdateResponse")]
        ToolSL.hhService.UpdateData GetUpdate(string userHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetUpdate", ReplyAction="http://tempuri.org/IServiceImport/GetUpdateResponse")]
        System.Threading.Tasks.Task<ToolSL.hhService.UpdateData> GetUpdateAsync(string userHash);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetFileList", ReplyAction="http://tempuri.org/IServiceImport/GetFileListResponse")]
        string[] GetFileList(string userHash, ToolSL.hhService.Player player, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetFileList", ReplyAction="http://tempuri.org/IServiceImport/GetFileListResponse")]
        System.Threading.Tasks.Task<string[]> GetFileListAsync(string userHash, ToolSL.hhService.Player player, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetPlayerFileList", ReplyAction="http://tempuri.org/IServiceImport/GetPlayerFileListResponse")]
        System.Tuple<System.DateTime, string>[] GetPlayerFileList(string userHash, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/GetPlayerFileList", ReplyAction="http://tempuri.org/IServiceImport/GetPlayerFileListResponse")]
        System.Threading.Tasks.Task<System.Tuple<System.DateTime, string>[]> GetPlayerFileListAsync(string userHash, string beginDate, string endDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/DownloadFile", ReplyAction="http://tempuri.org/IServiceImport/DownloadFileResponse")]
        byte[] DownloadFile(string userHash, string filename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImport/DownloadFile", ReplyAction="http://tempuri.org/IServiceImport/DownloadFileResponse")]
        System.Threading.Tasks.Task<byte[]> DownloadFileAsync(string userHash, string filename);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceImportChannel : ToolSL.hhService.IServiceImport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceImportClient : System.ServiceModel.ClientBase<ToolSL.hhService.IServiceImport>, ToolSL.hhService.IServiceImport {
        
        public ServiceImportClient() {
        }
        
        public ServiceImportClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceImportClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceImportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceImportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckConnection(string userHash, string role) {
            return base.Channel.CheckConnection(userHash, role);
        }
        
        public System.Threading.Tasks.Task<bool> CheckConnectionAsync(string userHash, string role) {
            return base.Channel.CheckConnectionAsync(userHash, role);
        }
        
        public string RegisterToken(string username, string password, string hash, string role) {
            return base.Channel.RegisterToken(username, password, hash, role);
        }
        
        public System.Threading.Tasks.Task<string> RegisterTokenAsync(string username, string password, string hash, string role) {
            return base.Channel.RegisterTokenAsync(username, password, hash, role);
        }
        
        public string CheckFileHash(string userHash, string fileHash) {
            return base.Channel.CheckFileHash(userHash, fileHash);
        }
        
        public System.Threading.Tasks.Task<string> CheckFileHashAsync(string userHash, string fileHash) {
            return base.Channel.CheckFileHashAsync(userHash, fileHash);
        }
        
        public string SendFile(string userHash, string fileHash, string fileName, byte[] Content) {
            return base.Channel.SendFile(userHash, fileHash, fileName, Content);
        }
        
        public System.Threading.Tasks.Task<string> SendFileAsync(string userHash, string fileHash, string fileName, byte[] Content) {
            return base.Channel.SendFileAsync(userHash, fileHash, fileName, Content);
        }
        
        public bool RegisterFile(string userHash, int id_player, string fileHash, string fileName) {
            return base.Channel.RegisterFile(userHash, id_player, fileHash, fileName);
        }
        
        public System.Threading.Tasks.Task<bool> RegisterFileAsync(string userHash, int id_player, string fileHash, string fileName) {
            return base.Channel.RegisterFileAsync(userHash, id_player, fileHash, fileName);
        }
        
        public ToolSL.hhService.Folder[] GetFolders(string userHash) {
            return base.Channel.GetFolders(userHash);
        }
        
        public System.Threading.Tasks.Task<ToolSL.hhService.Folder[]> GetFoldersAsync(string userHash) {
            return base.Channel.GetFoldersAsync(userHash);
        }
        
        public bool CreateFolder(string userHash, string folderName) {
            return base.Channel.CreateFolder(userHash, folderName);
        }
        
        public System.Threading.Tasks.Task<bool> CreateFolderAsync(string userHash, string folderName) {
            return base.Channel.CreateFolderAsync(userHash, folderName);
        }
        
        public ToolSL.hhService.Player[] GetPlayers(string userHash) {
            return base.Channel.GetPlayers(userHash);
        }
        
        public System.Threading.Tasks.Task<ToolSL.hhService.Player[]> GetPlayersAsync(string userHash) {
            return base.Channel.GetPlayersAsync(userHash);
        }
        
        public int SavePlayer(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.SavePlayer(userHash, player);
        }
        
        public System.Threading.Tasks.Task<int> SavePlayerAsync(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.SavePlayerAsync(userHash, player);
        }
        
        public bool RemovePlayer(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.RemovePlayer(userHash, player);
        }
        
        public System.Threading.Tasks.Task<bool> RemovePlayerAsync(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.RemovePlayerAsync(userHash, player);
        }
        
        public bool ApprovePlayer(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.ApprovePlayer(userHash, player);
        }
        
        public System.Threading.Tasks.Task<bool> ApprovePlayerAsync(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.ApprovePlayerAsync(userHash, player);
        }
        
        public bool DisablePlayer(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.DisablePlayer(userHash, player);
        }
        
        public System.Threading.Tasks.Task<bool> DisablePlayerAsync(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.DisablePlayerAsync(userHash, player);
        }
        
        public bool EnablePlayer(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.EnablePlayer(userHash, player);
        }
        
        public System.Threading.Tasks.Task<bool> EnablePlayerAsync(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.EnablePlayerAsync(userHash, player);
        }
        
        public ToolSL.hhService.ClientVersion GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<ToolSL.hhService.ClientVersion> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public string[] GetAllFileHashes(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.GetAllFileHashes(userHash, player);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllFileHashesAsync(string userHash, ToolSL.hhService.Player player) {
            return base.Channel.GetAllFileHashesAsync(userHash, player);
        }
        
        public ToolSL.hhService.UpdateData GetUpdate(string userHash) {
            return base.Channel.GetUpdate(userHash);
        }
        
        public System.Threading.Tasks.Task<ToolSL.hhService.UpdateData> GetUpdateAsync(string userHash) {
            return base.Channel.GetUpdateAsync(userHash);
        }
        
        public string[] GetFileList(string userHash, ToolSL.hhService.Player player, string beginDate, string endDate) {
            return base.Channel.GetFileList(userHash, player, beginDate, endDate);
        }
        
        public System.Threading.Tasks.Task<string[]> GetFileListAsync(string userHash, ToolSL.hhService.Player player, string beginDate, string endDate) {
            return base.Channel.GetFileListAsync(userHash, player, beginDate, endDate);
        }
        
        public System.Tuple<System.DateTime, string>[] GetPlayerFileList(string userHash, string beginDate, string endDate) {
            return base.Channel.GetPlayerFileList(userHash, beginDate, endDate);
        }
        
        public System.Threading.Tasks.Task<System.Tuple<System.DateTime, string>[]> GetPlayerFileListAsync(string userHash, string beginDate, string endDate) {
            return base.Channel.GetPlayerFileListAsync(userHash, beginDate, endDate);
        }
        
        public byte[] DownloadFile(string userHash, string filename) {
            return base.Channel.DownloadFile(userHash, filename);
        }
        
        public System.Threading.Tasks.Task<byte[]> DownloadFileAsync(string userHash, string filename) {
            return base.Channel.DownloadFileAsync(userHash, filename);
        }
    }
}
